#!/usr/bin/env python3

import rclpy
from rclpy.node import Node
from std_msgs.msg import String
from ur3_planner.srv import ArduinoCommand
import serial
import serial.tools.list_ports

class ArduinoInterface(Node):
    def __init__(self):
        super().__init__('arduino_interface')
        self.declare_parameter('port', '/dev/ttyACM0')
        port = self.get_parameter('port').get_parameter_value().string_value

        # Attempt to auto-detect the Arduino port if not specified
        if port == "":
            ports = list(serial.tools.list_ports.comports())
            for p in ports:
                if "Arduino" in p.description:
                    port = p.device
                    break

        self.ser = serial.Serial(port, 250000, timeout=1)
        self.get_logger().info(f"Connected to Arduino on port {port}")

        self.arduino_service = self.create_service(ArduinoCommand, 'arduino_command_service', self.handle_service_request)

    def handle_service_request(self, request, response):
        try:
            formatted_command = request.command.strip() + "\r\n"
            self.get_logger().info(f"Sending command to Arduino: {formatted_command}")
            self.ser.write(formatted_command.encode())
            
            response.result = self.ser.readline().decode('UTF-8').strip()  # Read the response from Arduino
        except Exception as e:
            self.get_logger().error(f"Failed to send command: {str(e)}")
            response.result = f"ERROR: {str(e)}"
        return response

    def run(self):
        rclpy.spin(self)

    def shutdown(self):
        if self.ser:
            self.ser.close()
            self.get_logger().info("Serial connection closed.")

def main(args=None):
    rclpy.init(args=args)
    arduino_interface = ArduinoInterface()
    try:
        arduino_interface.run()
    except KeyboardInterrupt:
        pass
    finally:
        arduino_interface.shutdown()
        arduino_interface.destroy_node()
        rclpy.shutdown()

if __name__ == '__main__':
    main()
